{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\The-Four-A-s\\\\bookshelf-corner-react\\\\src\\\\components\\\\ViewBookList.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const ViewBookList = () => {\n//   const [books, setBooks] = useState([]);\n\n//   useEffect(() => {\n//     // Function to fetch book data from the API\n//     const fetchBooks = async () => {\n//       try {\n//         const response = await fetch('http://localhost:8080/api/books');\n//         const data = await response.json();\n//         setBooks(data);\n//         console.log(data);\n//       } catch (error) {\n//         console.error('Error fetching book data:', error);\n//       }\n//     };\n\n//     // Call the fetchBooks function when the component mounts\n//     fetchBooks();\n//     //console.log(books);\n//   }, []); // Empty dependency array ensures the effect runs only once on mount\n\n//   return (\n//     <div>\n//       <h3 className='text-primary'>Books Available to Borrow</h3>\n//       <div className='bookshelf'>\n//         {books.map((book) => (\n//           <div key={book.bookId} className='book'>\n//             <ol>\n//               <li>\n//             <span className=\"label\">Book Title: {book.bookTitle}<br />\n//                                     Book Author: {book.bookAuthor} <br />\n//                                     Published Year: {book.publishedYear}<br />\n//                                     Genre: {book.genre} </span>\n//             <div className='text-success'>\n//               {book.available ? 'Available to borrow' : 'Not Available'}\n//             </div>\n//             </li>\n//             </ol>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ViewBookList;\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewBookList = () => {\n  _s();\n  const [books, setBooks] = useState([]);\n  useEffect(() => {\n    const fetchBooks = async () => {\n      try {\n        const response = await fetch('http://localhost:8080/api/books');\n        const data = await response.json();\n        setBooks(data);\n      } catch (error) {\n        console.error('Error fetching book data:', error);\n      }\n    };\n    fetchBooks();\n  }, []);\n  const handleBorrow = bookId => {\n    // Implement your borrowing logic here\n    // You might want to make a request to the server to update the book status or handle it locally\n    console.log(`Borrowing book with ID: ${bookId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-primary\",\n      children: \"Books Available to Borrow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bookshelf\",\n      children: books.map(book => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"book\",\n        children: /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"label\",\n              children: [\"Book Title: \", book.bookTitle, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 69\n              }, this), \"Book Author: \", book.bookAuthor, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 50\n              }, this), \"Published Year: \", book.publishedYear, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 55\n              }, this), \"Genre: \", book.genre, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-success\",\n              children: book.available ? 'Available to borrow' : 'Not Available'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), book.available && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleBorrow(book.bookId),\n              children: \"Borrow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)\n      }, book.bookId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewBookList, \"ww1JAI05mMsgubm5EIyBKqdj5S0=\");\n_c = ViewBookList;\nexport default ViewBookList;\nvar _c;\n$RefreshReg$(_c, \"ViewBookList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ViewBookList","_s","books","setBooks","fetchBooks","response","fetch","data","json","error","console","handleBorrow","bookId","log","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","book","bookTitle","bookAuthor","publishedYear","genre","available","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Admin/The-Four-A-s/bookshelf-corner-react/src/components/ViewBookList.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n\r\n// const ViewBookList = () => {\r\n//   const [books, setBooks] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Function to fetch book data from the API\r\n//     const fetchBooks = async () => {\r\n//       try {\r\n//         const response = await fetch('http://localhost:8080/api/books');\r\n//         const data = await response.json();\r\n//         setBooks(data);\r\n//         console.log(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching book data:', error);\r\n//       }\r\n//     };\r\n\r\n//     // Call the fetchBooks function when the component mounts\r\n//     fetchBooks();\r\n//     //console.log(books);\r\n//   }, []); // Empty dependency array ensures the effect runs only once on mount\r\n \r\n//   return (\r\n//     <div>\r\n//       <h3 className='text-primary'>Books Available to Borrow</h3>\r\n//       <div className='bookshelf'>\r\n//         {books.map((book) => (\r\n//           <div key={book.bookId} className='book'>\r\n//             <ol>\r\n//               <li>\r\n//             <span className=\"label\">Book Title: {book.bookTitle}<br />\r\n//                                     Book Author: {book.bookAuthor} <br />\r\n//                                     Published Year: {book.publishedYear}<br />\r\n//                                     Genre: {book.genre} </span>\r\n//             <div className='text-success'>\r\n//               {book.available ? 'Available to borrow' : 'Not Available'}\r\n//             </div>\r\n//             </li>\r\n//             </ol>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewBookList;\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst ViewBookList = () => {\r\n  const [books, setBooks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchBooks = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8080/api/books');\r\n        const data = await response.json();\r\n        setBooks(data);\r\n      } catch (error) {\r\n        console.error('Error fetching book data:', error);\r\n      }\r\n    };\r\n\r\n    fetchBooks();\r\n  }, []);\r\n\r\n  const handleBorrow = (bookId) => {\r\n    // Implement your borrowing logic here\r\n    // You might want to make a request to the server to update the book status or handle it locally\r\n    console.log(`Borrowing book with ID: ${bookId}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className='text-primary'>Books Available to Borrow</h3>\r\n      <div className='bookshelf'>\r\n        {books.map((book) => (\r\n          <div key={book.bookId} className='book'>\r\n            <ol>\r\n              <li>\r\n                <span className=\"label\">Book Title: {book.bookTitle}<br />\r\n                  Book Author: {book.bookAuthor} <br />\r\n                  Published Year: {book.publishedYear}<br />\r\n                  Genre: {book.genre} </span>\r\n                <div className='text-success'>\r\n                  {book.available ? 'Available to borrow' : 'Not Available'}\r\n                </div>\r\n                {book.available && (\r\n                  <button onClick={() => handleBorrow(book.bookId)}>\r\n                    Borrow\r\n                  </button>\r\n                )}\r\n              </li>\r\n            </ol>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewBookList;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}